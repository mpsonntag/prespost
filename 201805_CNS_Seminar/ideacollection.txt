
- History

https://en.wikipedia.org/wiki/Go_(programming_language)
https://texlution.com/post/why-go-is-doomed-to-succeed/
https://www.quora.com/Whats-the-history-of-golangs-syntax

- core areas (where does it come from)
-- google
-- server
- area extensions (where does it go)
-- IoT
-- science
--- [gonum project](http://www.gonum.org/)
    - gonum
        - equivalent to numpy
        - statistics
    - hdf5
    - plot
    - bindings for the linear algebra netlib.org package (BLAS and LAPACK)
    - [gonum github page](https://github.com/gonum)
    - [gonum tutorial]()
    - [gonum talks](https://github.com/gonum/talks)


- current usage
-- + where we use it

- comparison with other languages
-- https://www.quora.com/Is-Golang-going-to-overpower-Python
-- https://stxnext.com/blog/2017/09/27/go-go-python-rangers-comparing-python-and-golang/

There are a few more Go novelties that the Python developer will have to learn,such as:
    pointers
    structs (compound types)
    goroutines (comfy concurrency)
    channels (send messages between goroutines)
    methods (Go does not have classes, but you can define methods on types)
    closure
    defer (replacement for try-finally)

- language concepts
-- typed language
-- tabs
-- autoformat
-- small functions
-- error handling vs exception handling

- code examples / core concepts - language crash course
-- private / public
-- structs
-- Channels + usage

- libraries
-- core
--- fmt
-- 3rd party
--- cobra
--- linters

- Tools, links and tutorials
-- awesome go as reference for further repositories

Languages comparison
https://dzone.com/articles/most-popular-programming-languages-of-2017

Resources
[The state of go and other talks](https://talks.golang.org/)

Go present:
https://godoc.org/golang.org/x/tools/present
http://halyph.com/blog/2015/05/18/golang-presentation-tool.html
