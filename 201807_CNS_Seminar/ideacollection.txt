
- History

https://en.wikipedia.org/wiki/Go_(programming_language)
https://texlution.com/post/why-go-is-doomed-to-succeed/
https://www.quora.com/Whats-the-history-of-golangs-syntax


There are different levels why a programming language can be interesting

- tooling and ecosystem
- execution speed, hardware requirements
- learning curve and usability


- core areas (where does it come from)
-- google
-- server
- area extensions (where does it go)
-- IoT
-- science
--- [gonum project](http://www.gonum.org/)
    - gonum
        - equivalent to numpy
        - statistics
    - hdf5
    - plot
    - bindings for the linear algebra netlib.org package (BLAS and LAPACK)
    - [gonum github page](https://github.com/gonum)
    - [gonum tutorial]()
    - [gonum talks](https://github.com/gonum/talks)


- current usage
-- + where we use it

- comparison with other languages
-- https://www.quora.com/Is-Golang-going-to-overpower-Python
-- https://stxnext.com/blog/2017/09/27/go-go-python-rangers-comparing-python-and-golang/
-- [stackoverflow language comparison 2017](https://insights.stackoverflow.com/survey/2017#technology)
-- [stackoverflow most loved languages](https://insights.stackoverflow.com/survey/2017#most-loved-dreaded-and-wanted)

- benchmarks
-- https://benchmarksgame-team.pages.debian.net/benchmarksgame/faster/go.html

-- go pros and cons
https://www.slant.co/versus/126/127/~golang_vs_c

There are a few more Go novelties that the Python developer will have to learn,such as:
    pointers
    structs (compound types)
    goroutines (comfy concurrency)
    channels (send messages between goroutines)
    methods (Go does not have classes, but you can define methods on types)
    closure
    defer (replacement for try-finally)

- language concepts
-- typed language
-- tabs
-- autoformat
-- small functions
-- error handling vs exception handling

    error style: return when an error occurs and deal with it appropriately at every level

-- tooling around it
    - [online tutorial with hands on examples](https://tour.golang.org/welcome/1)
    - local and [online playground](https://play.golang.org)
    - mature IDE: Visual Studio Code (https://code.visualstudio.com/)
    - free for students: https://www.jetbrains.com/go/

- code examples / core concepts - language crash course
-- private / public
-- structs

    main data structure - using structs for everything internally

-- Channels + usage
-- concurrency [talk](https://talks.godoc.org/github.com/gonum/talks/2015/intro_concurrency.slide#1)

- mainly nice to use language idioms - lots of small things that make it convenient to work with

   e.g.
   for bla := range currList {}

    if _, ok := currList[currKey]; !ok { return error("not found") }

- easy cross compilation

- [cgo](https://golang.org/cmd/cgo/)

- automatic online documentation - [godoc](https://godoc.org/)

-- comparison python - golang
https://groups.google.com/forum/#!topic/golang-nuts/MNxj22knZGw
https://www.slant.co/versus/110/126/~python_vs_golang
https://blog.filippo.io/building-python-modules-with-go-1-5/
https://stxnext.com/blog/2017/09/27/go-go-python-rangers-comparing-python-and-golang/
https://stackoverflow.com/questions/1743526/differences-between-go-and-cython
https://stackoverflow.com/questions/12443203/writing-a-python-extension-in-go-golang


- Hardware platform support
-- [gobot](https://gobot.io/) supports building on and for 35 different platforms including Arduino and Raspberry Pi.

- libraries
-- core
--- fmt
-- 3rd party
--- cobra
--- linters

-- machine learning


- Tools, links and tutorials
-- [awesome go](https://github.com/avelino/awesome-go)
-- [effective go](https://golang.org/doc/effective_go.html)

Languages comparison
https://dzone.com/articles/most-popular-programming-languages-of-2017

Resources
[The state of go and other talks](https://talks.golang.org/)

Go present:
https://godoc.org/golang.org/x/tools/present
http://halyph.com/blog/2015/05/18/golang-presentation-tool.html
